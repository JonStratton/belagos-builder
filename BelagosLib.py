#!/usr/bin/env python3
import pexpect, os, platform, requests, re, subprocess, sys, glob

def boot_vm(command):
   pexp = pexpect.spawn(command, timeout=None)

   while True:
      i = pexp.expect(['\w+# ', 'bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd00/fscache -a tcp!\*!564\] ', 'bootargs is \(tcp, tls, il, local!device\)\[local!/dev/fs/fscache -a tcp!\*!564\] '])
      if i==0: # Command line. We are done
         break
      elif i==1: # Normal Boot.
         pexp.sendline()
      elif i==2: # Disk Encryption.
         pexp.sendline("!rc")
         pexp.expect('% ')
         pexp.sendline("disk/cryptsetup -i /dev/sd00/fsworm /dev/sd00/fscache /dev/sd00/other")
         pexp.expect('Password: ')
         pexp.sendline(DISK_PASS)
         pexp.expect('% ')
         pexp.sendline("exit")
         pexp.expect('bootargs is ')
         pexp.sendline()
   return(pexp)

def halt_vm(pexp):
   pexp.sendline()
   pexp.expect('\w+# ')
   pexp.sendline('fshalt')
   pexp.expect('done halting')
   pexp.close()
   return(0)

def grid_authserver_vm(command, glenda_pass):
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('authserve# ')
   pexp.sendline('auth/changeuser glenda')
   pexp.expect('Password\:')
   pexp.sendline(glenda_pass)
   pexp.expect('Confirm password\:')
   pexp.sendline(glenda_pass)
   pexp.expect('assign.*POP.*\:')
   pexp.sendline('n')
   pexp.expect('Expiration.*\:')
   pexp.sendline()
   pexp.expect('Post.*\:')
   pexp.sendline()
   pexp.expect('.*name\:')
   pexp.sendline()
   pexp.expect('Department.*\:')
   pexp.sendline()
   pexp.expect('U.*email address\:')
   pexp.sendline()
   pexp.expect('Spon.*email address\:')
   pexp.sendline()
   pexp.expect('authserve# ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()
   return(0)

def grid_nvram_vm(command, glenda_pass):
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout

   while True:
      i = pexp.expect(['\w+# ', 'authid\:', 'Password\: '])
      if i==0: # Command line. We are done
         break
      elif i==1:
         pexp.sendline('glenda')
         pexp.expect('authdom\:')
         pexp.sendline('localgrid')
         pexp.expect('secstore key\:')
         pexp.sendline(glenda_pass)
         pexp.expect('password\:')
         pexp.sendline(glenda_pass)
         pexp.expect('confirm password\: ')
         pexp.sendline(glenda_pass)
         pexp.expect('enable legacy p9sk1.*')
         pexp.sendline()
      elif i==2:
         pexp.sendline(glenda_pass)
         pexp.expect('Confirm password\: ')
         pexp.sendline(glenda_pass)

   pexp.sendline('plan9Scripts/nvram.rc')
   pexp.expect('\w+# ')
   pexp.sendline('auth/wrkey')
   pexp.expect('authid\:')
   pexp.sendline('glenda')
   pexp.expect('authdom\:')
   pexp.sendline('localgrid')
   pexp.expect('secstore key\:')
   pexp.sendline(glenda_pass)
   pexp.expect('password\:')
   pexp.sendline(glenda_pass)
   pexp.expect('confirm password\: ')
   pexp.sendline(glenda_pass)
   pexp.expect('enable legacy p9sk1.*')
   pexp.sendline()
   pexp.expect('\w+# ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()
   return(0)

def base_services_vm(command, glenda_pass, installType):
   # Enable CPU service
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd00/fscache\]')
   pexp.sendline()
   pexp.expect('user\[glenda\]: ')
   pexp.sendline()
   pexp.expect('term% ')
   pexp.sendline('9fs 9fat; echo \'service=cpu\' >>/n/9fat/plan9.ini')
   pexp.expect('term% ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()

   # Set a password for Glenda
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd00/fscache\]')
   pexp.sendline()
   pexp.expect('authid\: ')
   pexp.sendline('glenda')
   pexp.expect('authdom\: ')
   pexp.sendline('localgrid')
   pexp.expect('secstore key\: ')
   pexp.sendline('Password')
   pexp.expect('password\: ')
   pexp.sendline('Password')
   pexp.expect('confirm password\: ')
   pexp.sendline('Password')
   pexp.expect('enable legacy p9sk1.*\: ')
   pexp.sendline()
   pexp.expect('# ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()

   # Turn on 9p/fs Serve
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd00/fscache\]')
   pexp.sendline('local!/dev/sd00/fscache -c')
   pexp.expect('config\: ')
   pexp.sendline('noauth')
   pexp.expect('config\: ')
   pexp.sendline('noauth')
   pexp.expect('config\: ')
   pexp.sendline('end')
   pexp.expect('# ')
   pexp.sendline('9fs 9fat; echo \'bootargs=local!/dev/sd00/fscache -a tcp!*!564\' >>/n/9fat/plan9.ini')
   pexp.expect('# ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()

   # Copy post install scripts and execute
   command_withIso = "%s -drive if=none,id=vd1,file=grid/plan9Scripts.iso -device scsi-cd,drive=vd1," % (command)
   pexp = pexpect.spawn(command_withIso, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd00/fscache -a .*\]')
   pexp.sendline()
   pexp.expect('# ')
   pexp.sendline('mkdir plan9Scripts')
   pexp.expect('# ')
   pexp.sendline('mount <{9660srv -s >[0=1]} /n/iso /dev/sd01/data')
   pexp.expect('# ')
   pexp.sendline('cp /n/iso/* plan9Scripts')
   pexp.expect('# ')
   pexp.sendline('chmod 755 plan9Scripts/*')
   pexp.expect('# ')
   if installType == 'grid':
      pexp.sendline('plan9Scripts/pxe.rc')
   else: 
      pexp.sendline('plan9Scripts/solo.rc')
   pexp.expect('# ')
   pexp.sendline('fshalt')
   pexp.expect(pexpect.EOF)
   pexp.close()
   return(0)

# Plan 9 install: take all defaults and when you see >>>, type w \n q.
def base_install_vm(command):
   pexp = pexpect.spawn(command, timeout=None, encoding='utf-8')
   pexp.logfile = sys.stdout
   pexp.expect('bootargs is \(tcp, tls, il, local!device\)\[local!/dev/sd01/data\]')
   pexp.sendline()
   pexp.expect('user\[glenda\]: ')
   pexp.sendline()
   pexp.expect('vgasize is \(text, 640x480x8, 1024x768x16, ...\) \[1024x768x16\] ')
   pexp.sendline('text')
   pexp.expect('term% ')
   pexp.sendline('inst/start')
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('File system *:*')
   pexp.sendline()
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Disk to partition .*\: ')
   pexp.sendline('sd00')
   pexp.expect('Install mbr or gpt .*\: ')
   pexp.sendline('mbr')
   pexp.expect('>>>')
   pexp.sendline('w')
   pexp.expect('>>>')
   pexp.sendline('q')
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Plan 9 partition to subdivide .*\: ')
   pexp.sendline()
   pexp.expect('>>>')
   pexp.sendline('w')
   pexp.expect('>>>')
   pexp.sendline('q')
   # Disk Encyption Here
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Cwfs cache partition .*\: ')
   pexp.sendline()
   pexp.expect('Cwfs worm partition .*\: ')
   pexp.sendline()
   pexp.expect('Cwfs other partition .*\: ')
   pexp.sendline()
   pexp.expect('Ream the filesystem?.*')
   pexp.sendline()
   pexp.expect('Task to do \[.*\]: ')
   pexp.sendline()
   pexp.expect('Configuration method .*\: ')
   pexp.sendline('manual')
   pexp.expect('ip address .*\: ')
   pexp.sendline('192.168.9.3')
   pexp.expect('network mask .*\: ')
   pexp.sendline('255.255.255.0')
   pexp.expect('gateway address .*\: ')
   pexp.sendline('192.168.9.1')
   pexp.expect('dns server .*\: ')
   pexp.sendline('192.168.9.1')
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Distribution disk .*\: ')
   pexp.sendline('/dev/sd01/data')
   pexp.expect('Location of archives .*\: ')
   pexp.sendline()
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('sysname .*\: ')
   pexp.sendline()
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Time Zone .*: ')
   pexp.sendline('US_Central')
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect('Plan 9 FAT partition .*\: ')
   pexp.sendline()
   pexp.expect('Install the Plan 9 master boot record .*\: ')
   pexp.sendline('yes')
   pexp.expect('Mark the Plan 9 partition active .*\: ')
   pexp.sendline('yes')
   pexp.expect('Task to do \[.*\]\: ')
   pexp.sendline()
   pexp.expect(pexpect.EOF)
   pexp.close()
   return(0)
