#!/usr/bin/expect -f

set disk_pass ""

# Open input and output pipes
set script_loc [exec dirname $argv0]
set in_pipe "$script_loc/../img/belagos_in"
set out_pipe "$script_loc/../img/belagos_out"

proc read_pipe {} {
   global in_pipe
   set fp [open $in_pipe r]
   set in_line [string trim [read $fp] ]
   close $fp
   return $in_line
}

proc write_pipe {out_line} {
   global out_pipe
   set fp [open $out_pipe w]
   puts $fp $out_line
   close $fp
}

proc menu {} {
   global disk_pass
   set pipe_command [read_pipe]

   if { $pipe_command == "halt" } {
      exit_pipe
   } elseif { $pipe_command == "password" } {
      set disk_pass [read_pipe]
   } elseif { $pipe_command == "status" } {
      status_pipe
   } else {
      write_pipe "status|password|halt|help"
   }
}

proc status_pipe {} {
   global status
   foreach i [array names status] {
      write_pipe "status($i): $status($i)"
   }
}

proc exit_pipe {} {
   global spawn_ids
   global in_pipe
   global out_pipe
   foreach i [array names spawn_ids] {
      set spawn_id $spawn_ids($i)
      send "\r"
      expect "# "
      send "fshalt\r"
      expect eof
   }
   exec rm $in_pipe
   exec rm $out_pipe
   exit 0
}

foreach runner $argv {
   set timeout -1
   spawn $runner
   set spawn_ids($runner) $spawn_id
   expect { 
      # /dev/fs, in this case, means encryption
      "bootargs is */dev/fs/fscache\]*" {
         send "!rc\r"
         expect "% "
         send "disk/cryptsetup -i /dev/sd00/fsworm /dev/sd00/fscache /dev/sd00/other\r"
         expect "Password: "

         set status($runner) "Waiting on Disk Password"
         while { $disk_pass eq "" } {
            menu
         }
         # TODO, handle bad passwords

         send "$disk_pass\r"
         expect "% "
         send "exit\r"
         expect "bootargs is */dev/fs/fscache\]*"
         send "\r"
      }
      # Boot normally
      "bootargs is */dev/sd00/fscache\]*" {
         send "\r"
      }
      # Boots to prompt
      "# *" {
         send "\r"
      }
   }

   expect "# "
   set status($runner) "on"
}

# Wait for commands from pipe
while {1} {
   menu
}
